"use client";

import React, { useState, useCallback } from 'react';
import { Button } from './button';
import { X, RotateCw, ZoomIn, ZoomOut, Crop } from 'lucide-react';
import Cropper, { Area, Point } from 'react-easy-crop';
import { createImage } from '@/lib/createImage';

interface ImageCropperProps {
  imageUrl: string;
  onCropComplete: (croppedFile: File) => void;
  onCancel: () => void;
  aspectRatio?: number;
}

export function ImageCropper({ 
  imageUrl, 
  onCropComplete, 
  onCancel, 
  aspectRatio = 1 
}: ImageCropperProps) {
  const [crop, setCrop] = useState<Point>({ x: 0, y: 0 });
  const [zoom, setZoom] = useState(1);
  const [rotation, setRotation] = useState(0);
  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area | null>(null);

  const onCropChange = useCallback((location: Point) => {
    setCrop(location);
  }, []);

  const onZoomChange = useCallback((newZoom: number) => {
    setZoom(newZoom);
  }, []);

  const onCropAreaComplete = useCallback((_: Area, croppedAreaPixels: Area) => {
    setCroppedAreaPixels(croppedAreaPixels);
  }, []);

  const handleCrop = useCallback(async () => {
    if (!croppedAreaPixels) return;

    try {
      const image = await createImage(imageUrl);
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      if (!ctx) throw new Error('No 2d context');

      // Set width and height for the canvas
      canvas.width = croppedAreaPixels.width;
      canvas.height = croppedAreaPixels.height;

      // Move the origin to the center of the canvas
      ctx.translate(canvas.width / 2, canvas.height / 2);
      
      // Rotate the canvas if needed
      if (rotation) {
        ctx.rotate((rotation * Math.PI) / 180);
      }

      // Draw the cropped image
      ctx.scale(1/zoom, 1/zoom);
      ctx.translate(
        -croppedAreaPixels.x - croppedAreaPixels.width / 2, 
        -croppedAreaPixels.y - croppedAreaPixels.height / 2
      );
      ctx.drawImage(image, 0, 0);

      // Convert canvas to blob
      const blob = await new Promise<Blob>((resolve, reject) => {
        canvas.toBlob(
          (blob) => {
            if (blob) resolve(blob);
            else reject(new Error('Canvas to Blob conversion failed'));
          },
          'image/jpeg',
          0.9
        );
      });

      // Create a File from the blob
      const fileName = imageUrl.split('/').pop() || 'cropped-image.jpg';
      const croppedFile = new File([blob], fileName, { type: 'image/jpeg' });
      onCropComplete(croppedFile);
    } catch (error) {
      console.error('Error cropping image:', error);
    }
  }, [croppedAreaPixels, imageUrl, rotation, zoom, onCropComplete]);

  return (
    <div className="fixed inset-0 bg-black/50 z-50">
      <div className="absolute inset-8 bg-white rounded-lg overflow-hidden flex flex-col">
        <div className="p-6 border-b flex justify-between items-center">
          <h2 className="text-xl font-semibold">Crop Image</h2>
          <Button variant="ghost" size="sm" onClick={onCancel}>
            <X className="h-4 w-4" />
          </Button>
        </div>

        <div className="relative flex-1">
          <Cropper
            image={imageUrl}
            crop={crop}
            zoom={zoom}
            aspect={aspectRatio}
            rotation={rotation}
            onCropChange={onCropChange}
            onZoomChange={onZoomChange}
            onCropComplete={onCropAreaComplete}
          />
        </div>

        <div className="p-6 border-t flex items-center justify-between">
          <div className="flex items-center gap-4">
            <Button
              variant="outline"
              size="sm"
              onClick={() => setZoom((z) => Math.max(1, z - 0.1))}
            >
              <ZoomOut className="h-4 w-4" />
            </Button>
            <span className="text-sm">{Math.round(zoom * 100)}%</span>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setZoom((z) => Math.min(3, z + 0.1))}
            >
              <ZoomIn className="h-4 w-4" />
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => setRotation((r) => (r + 90) % 360)}
            >
              <RotateCw className="h-4 w-4" />
            </Button>
          </div>

          <div className="flex gap-2">
            <Button variant="outline" onClick={onCancel}>
              Cancel
            </Button>
            <Button onClick={handleCrop}>
              <Crop className="h-4 w-4 mr-2" />
              Crop Image
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}
